# This is a GitLab CI configuration to build the project as a docker image
# The file is generic enough to be dropped in a project containing a working Dockerfile
# Author: Florent CHAUVEAU <florent.chauveau@gmail.com>
# Mentioned here: https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/

# do not use "latest" here, if you want this to work in the future
image: docker:20

# Use this if your GitLab runner does not use socket binding
services:
  - docker:dind

stages:
  - build
  - push
  - deploy

variables:
  # fill those if you have a proxy in your environment
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""

before_script:
  # docker login asks for the password to be passed through stdin for security
  # we use $CI_REGISTRY_PASSWORD here which is a special variable provided by GitLab
  # https://docs.gitlab.com/ce/ci/variables/predefined_variables.html
  - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

Build:
  stage: build
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # builds the project, passing proxy variables, using OCI labels
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to 
    # the GitLab registry
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# Here, the goal is to tag the "master" branch as "latest"
Push latest:
  variables:
    # We are just playing with Docker here. 
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: push
  only:
    # Only "master" should be tagged "latest"
    # - master
    variables:
      - $CI_DEFAULT_BRANCH == $CI_COMMIT_REF_NAME
  script:
    # Because we have no guarantee that this job will be picked up by the same runner 
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Then we tag it "latest"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    # Annnd we push it.
    - docker push $CI_REGISTRY_IMAGE:latest
  

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
Push tag:
  variables:
    # Again, we do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: none
  stage: push
  only:
    # We want this job to be run on tags and branches only.
    - tags
    - branches
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

.deploy: &deploy
  stage: deploy
  script:
    - eval "export X_DOCKER_CACERT=\"\$${X_DOCKER_CACERT}\""
    - eval "export X_DOCKER_CERT=\"\$${X_DOCKER_CERT}\""
    - eval "export X_DOCKER_KEY=\"\$${X_DOCKER_KEY}\""
    - eval "export X_DEPLOY_HOST=\"\$${X_DEPLOY_HOST}\""
    - mkdir -p ~/.docker && cp $X_DOCKER_CACERT ~/.docker/ca.pem && cp $X_DOCKER_CERT ~/.docker/cert.pem && cp $X_DOCKER_KEY ~/.docker/key.pem
    - export "DOCKER_HOST=tcp://$X_DEPLOY_HOST:2376" DOCKER_TLS_VERIFY=1
    - docker-compose pull
    - docker-compose up -d

deploy_staging:
  variables:
    X_DOCKER_CACERT: DOCKER_CACERT_STAGING
    X_DOCKER_CERT: DOCKER_CERT_STAGING
    X_DOCKER_KEY: DOCKER_KEY_STAGING
    X_DEPLOY_HOST: DEPLOY_HOST_STAGING
  only:
    variables:
      - $CI_DEFAULT_BRANCH == $CI_COMMIT_REF_NAME
  <<: *deploy
  environment:
    name: staging
    url: http://$X_DEPLOY_HOST

deploy_prod:
  variables:
    X_DOCKER_CACERT: DOCKER_CACERT_PROD
    X_DOCKER_CERT: DOCKER_CERT_PROD
    X_DOCKER_KEY: DOCKER_KEY_PROD
    X_DEPLOY_HOST: DEPLOY_HOST_PROD
  when: manual
  <<: *deploy
  environment:
    name: production
    url: http://$X_DEPLOY_HOST
